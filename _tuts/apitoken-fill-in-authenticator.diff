diff --git a/src/AppBundle/Security/ApiTokenAuthenticator.php b/src/AppBundle/Security/ApiTokenAuthenticator.php
index 2774c5d..cc7a23a 100644
--- a/src/AppBundle/Security/ApiTokenAuthenticator.php
+++ b/src/AppBundle/Security/ApiTokenAuthenticator.php
@@ -2,48 +2,78 @@
 
 namespace AppBundle\Security;
 
+use Doctrine\ORM\EntityManager;
+use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\Security\Guard\AbstractGuardAuthenticator;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
+use Symfony\Component\Security\Core\Exception\AuthenticationCredentialsNotFoundException;
 use Symfony\Component\Security\Core\Exception\AuthenticationException;
 use Symfony\Component\Security\Core\User\UserInterface;
 use Symfony\Component\Security\Core\User\UserProviderInterface;
 
 class ApiTokenAuthenticator extends AbstractGuardAuthenticator
 {
+    private $em;
+
+    public function __construct(EntityManager $em)
+    {
+        $this->em = $em;
+    }
+
     public function getCredentials(Request $request)
     {
-        // TODO: Implement getCredentials() method.
+        return $request->headers->get('X-TOKEN');
     }
 
     public function getUser($credentials, UserProviderInterface $userProvider)
     {
-        // TODO: Implement getUser() method.
+        $user = $this->em->getRepository('AppBundle:User')
+            ->findOneBy(array('apiToken' => $credentials));
+
+        // we could just return null, but this allows us to control the message a bit more
+        if (!$user) {
+            throw new AuthenticationCredentialsNotFoundException();
+        }
+
+        return $user;
     }
 
     public function checkCredentials($credentials, UserInterface $user)
     {
-        // TODO: Implement checkCredentials() method.
+        // the fact that they had a valid token that *was* attached to a user
+        // means that their credentials are correct. So, there's nothing
+        // additional (like a password) to check here.
+        return true;
     }
 
     public function onAuthenticationFailure(Request $request, AuthenticationException $exception)
     {
-        // TODO: Implement onAuthenticationFailure() method.
+        return new JsonResponse(
+            // you could translate the message
+            array('message' => $exception->getMessageKey()),
+            403
+        );
     }
 
     public function onAuthenticationSuccess(Request $request, TokenInterface $token, $providerKey)
     {
-        // TODO: Implement onAuthenticationSuccess() method.
+        // do nothing - let the request just continue!
+        return;
     }
 
     public function supportsRememberMe()
     {
-        // TODO: Implement supportsRememberMe() method.
+        return false;
     }
 
     public function start(Request $request, AuthenticationException $authException = null)
     {
-        // TODO: Implement start() method.
+        return new JsonResponse(
+            // you could translate the message
+            array('message' => 'Authentication required'),
+            401
+        );
     }
-}
\ No newline at end of file
+}
