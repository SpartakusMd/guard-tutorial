diff --git a/app/Resources/views/security/login.html.twig b/app/Resources/views/security/login.html.twig
index 0d5b3a4..23720ac 100644
--- a/app/Resources/views/security/login.html.twig
+++ b/app/Resources/views/security/login.html.twig
@@ -20,5 +20,7 @@
 
         <br/>
         <button type="submit">Login</button>
+
+        <a href="{{ path('connect_facebook') }}">Login with Facebook</a>
     </form>
 {% endblock %}
diff --git a/app/config/config.yml b/app/config/config.yml
index b4a2d0a..bddc6ec 100644
--- a/app/config/config.yml
+++ b/app/config/config.yml
@@ -78,3 +78,12 @@ swiftmailer:
     username:  "%mailer_user%"
     password:  "%mailer_password%"
     spool:     { type: memory }
+
+knpu_oauth2_client:
+    clients:
+        my_facebook_client:
+            type: facebook
+            client_id: %facebook_app_id%
+            client_secret: %facebook_app_secret%
+            graph_api_version: v2.5
+            redirect_route: connect_facebook_check
diff --git a/app/config/parameters.yml b/app/config/parameters.yml
index f5e0347..dd86a8a 100644
--- a/app/config/parameters.yml
+++ b/app/config/parameters.yml
@@ -10,3 +10,5 @@ parameters:
     mailer_user: null
     mailer_password: null
     secret: a3250d79a622c2f1d034943d9ff4397d500552dd
+    facebook_app_id: XXXX
+    facebook_app_secret: XXXX
diff --git a/app/config/parameters.yml.dist b/app/config/parameters.yml.dist
index 886c92b..2833651 100644
--- a/app/config/parameters.yml.dist
+++ b/app/config/parameters.yml.dist
@@ -17,3 +17,5 @@ parameters:
 
     # A secret key that's used to generate certain security-related tokens
     secret:            ThisTokenIsNotSoSecretChangeIt
+    facebook_app_id:  XXXX
+    facebook_app_secret: XXXX
diff --git a/app/config/security.yml b/app/config/security.yml
index f1a8f1f..3ab12ae 100644
--- a/app/config/security.yml
+++ b/app/config/security.yml
@@ -23,5 +23,6 @@ security:
                 authenticators:
                     - app.form_login_authenticator
                     - app.api_token_authenticator
+                    - app.facebook_authenticator
                 # by default, use the start() function from FormLoginAuthenticator
                 entry_point: app.form_login_authenticator
diff --git a/app/config/services.yml b/app/config/services.yml
index e10b621..4884a2b 100644
--- a/app/config/services.yml
+++ b/app/config/services.yml
@@ -17,3 +17,7 @@ services:
         arguments: ["@doctrine.orm.entity_manager"]
         tags:
             - { name: kernel.event_subscriber }
+
+    app.facebook_authenticator:
+        class: AppBundle\Security\FacebookAuthenticator
+        autowire: true
diff --git a/src/AppBundle/Controller/FacebookConnectController.php b/src/AppBundle/Controller/FacebookConnectController.php
new file mode 100644
index 0000000..c1819fc
--- /dev/null
+++ b/src/AppBundle/Controller/FacebookConnectController.php
@@ -0,0 +1,34 @@
+<?php
+
+namespace AppBundle\Controller;
+
+use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
+use Symfony\Bundle\FrameworkBundle\Controller\Controller;
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpFoundation\Response;
+use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
+
+class FacebookConnectController extends Controller
+{
+    /**
+     * @Route("/connect/facebook", name="connect_facebook")
+     */
+    public function connectFacebookAction(Request $request)
+    {
+        // redirect to Facebook
+        $facebookClient = $this->get('knpu.oauth2.registry')
+            ->getClient('my_facebook_client');
+
+        return $facebookClient->redirect([
+            'public_profile', 'email'
+        ]);
+    }
+
+    /**
+     * @Route("/connect/facebook-check", name="connect_facebook_check")
+     */
+    public function connectFacebookActionCheck()
+    {
+        // will not be reached!
+    }
+}
diff --git a/src/AppBundle/Entity/User.php b/src/AppBundle/Entity/User.php
index 53297e6..eaf0425 100644
--- a/src/AppBundle/Entity/User.php
+++ b/src/AppBundle/Entity/User.php
@@ -56,6 +56,11 @@ class User implements UserInterface
      */
     private $lastLoginTime;
 
+    /**
+     * @ORM\Column(type="string", length=50, nullable=true)
+     */
+    private $facebookId;
+
     public function __construct()
     {
         $this->apiToken = base_convert(sha1(uniqid(mt_rand(), true)), 16, 36);
@@ -146,4 +151,14 @@ class User implements UserInterface
     {
         $this->lastLoginTime = $lastLoginTime;
     }
+
+    public function getFacebookId()
+    {
+        return $this->facebookId;
+    }
+
+    public function setFacebookId($facebookId)
+    {
+        $this->facebookId = $facebookId;
+    }
 }
diff --git a/src/AppBundle/Security/FacebookAuthenticator.php b/src/AppBundle/Security/FacebookAuthenticator.php
index a48dd45..13c9b3d 100644
--- a/src/AppBundle/Security/FacebookAuthenticator.php
+++ b/src/AppBundle/Security/FacebookAuthenticator.php
@@ -2,8 +2,19 @@
 
 namespace AppBundle\Security;
 
-use KnpU\OAuth2ClientBundle\Security\Authenticator\SocialAuthenticator;
+use AppBundle\Entity\User;
+use Doctrine\ORM\EntityManager;
+use KnpU\OAuth2ClientBundle\Client\Provider\FacebookClient;
+use League\OAuth2\Client\Token\AccessToken;
+use Symfony\Component\Security\Core\Exception\CustomUserMessageAuthenticationException;
+use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
+use League\OAuth2\Client\Provider\Facebook;
+use League\OAuth2\Client\Provider\FacebookUser;
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Response;
+use Symfony\Component\Routing\RouterInterface;
+use Symfony\Component\Security\Core\Security;
+use KnpU\OAuth2ClientBundle\Security\Authenticator\SocialAuthenticator;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
 use Symfony\Component\Security\Core\Exception\AuthenticationException;
@@ -12,28 +23,125 @@ use Symfony\Component\Security\Core\User\UserProviderInterface;
 
 class FacebookAuthenticator extends SocialAuthenticator
 {
+    /**
+     * @var Facebook
+     */
+    private $facebookClient;
+    /**
+     * @var EntityManager
+     */
+    private $em;
+    /**
+     * @var RouterInterface
+     */
+    private $router;
+
+    public function __construct(FacebookClient $facebookClient, EntityManager $em, RouterInterface $router)
+    {
+        $this->facebookClient = $facebookClient;
+        $this->em = $em;
+        $this->router = $router;
+    }
+
     public function getCredentials(Request $request)
     {
-        // todo
+        if ($request->getPathInfo() != '/connect/facebook-check') {
+            // skip authentication unless we're on this URL!
+            return null;
+        }
+
+        try {
+            return $this->facebookClient->getAccessToken($request);
+        } catch (IdentityProviderException $e) {
+            // you could parse the response to see the problem
+            throw $e;
+        }
     }
 
     public function getUser($credentials, UserProviderInterface $userProvider)
     {
-        // todo
+        /** @var AccessToken $accessToken */
+        $accessToken = $credentials;
+
+        $facebookUser = $this->facebookClient->fetchUserFromToken($accessToken);
+        $email = $facebookUser->getEmail();
+
+        // 1) have they logged in with Facebook before? Easy!
+        $existingUser = $this->em->getRepository('AppBundle:User')
+            ->findOneBy(array('facebookId' => $facebookUser->getId()));
+        if ($existingUser) {
+            return $existingUser;
+        }
+
+        // 2) do we have a matching user by email?
+        $user = $this->em->getRepository('AppBundle:User')
+                    ->findOneBy(array('email' => $email));
+
+        // 3) no user? Perhaps you just want to create one
+        //      or maybe you want to redirect to a registration (in that case, keep reading_
+        if (!$user) {
+            $user = new User();
+            $user->setUsername($email);
+            $user->setEmail($email);
+            // set an un-encoded password, which basically makes it *not* possible
+            // to login with any password
+            $user->setPassword('no password');
+        }
+
+        // make sure the Facebook user is set
+        $user->setFacebookId($facebookUser->getId());
+        $this->em->persist($user);
+        $this->em->flush();
+
+        return $user;
+    }
+
+    public function checkCredentials($credentials, UserInterface $user)
+    {
+        return true;
+        // do nothing - the fact that the access token worked means that
+        // our app has been authorized with Facebook
     }
 
     public function onAuthenticationFailure(Request $request, AuthenticationException $exception)
     {
-        // todo
+        // this would happen if something went wrong in the OAuth flow
+        $request->getSession()->set(Security::AUTHENTICATION_ERROR, $exception);
+
+        $url = $this->router
+            ->generate('security_login');
+
+        return new RedirectResponse($url);
     }
 
     public function onAuthenticationSuccess(Request $request, TokenInterface $token, $providerKey)
     {
-        // todo
+        // todo - remove needing this crazy thing
+        $targetPath = $request->getSession()->get('_security.'.$providerKey.'.target_path');
+
+        if (!$targetPath) {
+            $router = $this->router;
+            $targetPath = $router->generate('homepage');
+        }
+
+        return new RedirectResponse($targetPath);
     }
 
+    /**
+     * Called when an anonymous user tries to access an protected page.
+     *
+     * In our app, this is never actually called, because there is only *one*
+     * "entry_point" per firewall and in security.yml, we're using
+     * app.form_login_authenticator as the entry point (so it's start() method
+     * is the one that's called).
+     */
     public function start(Request $request, AuthenticationException $authException = null)
     {
-        // todo
+        // not called in our app, but if it were, redirecting to the
+        // login page makes sense
+        $url = $this->router
+            ->generate('security_login');
+
+        return new RedirectResponse($url);
     }
 }
